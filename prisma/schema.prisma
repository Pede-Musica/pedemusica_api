// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @unique @default(uuid())
  is_active Boolean @default(true)
  name      String  @db.VarChar(255)
  email     String? @unique
  password  String?

  person_id    String? @unique
  person       Person? @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sys_admin    Boolean @default(false)
  client_admin Boolean @default(false)
  client_id    String?
  client       Client? @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  new_user NewUser?
  log_user LogUsers[]

  @@map("users")
}

model Person {
  id       String  @id @unique @default(uuid())
  name     String  @db.VarChar(255)
  position String? @db.VarChar(255)
  phone    String
  phone2   String?
  address  String? @db.VarChar(255)
  cpf_cnpj String? @db.VarChar(255)

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  user User?

  @@map("persons")
}

model NewUser {
  id    String @id @unique @default(uuid())
  token String @unique

  user_id String? @unique
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("new_user")
}

model Client {
  id       String  @id @unique @default(uuid())
  slug     String  @unique
  name     String  @db.VarChar(255)
  email    String  @unique
  cpf_cnpj String  @db.VarChar(255)
  address  String  @db.VarChar(255)
  phone    String
  phone2   String?
  logo     String?

  client_config ClientConfig[]
  user          User[]
  request       Requests[]

  @@map("clients")
}

model ClientConfig {
  client_id String @id
  client    Client @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  config    String
  value     String

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("client_configs")
}

model LogServices {
  id      Int     @id @unique @default(autoincrement())
  service String
  class   String?
  success Boolean
  log     String  @db.VarChar(255)

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("log_services")
}

model LogUsers {
  id      Int     @id @unique @default(autoincrement())
  user_id String
  class   String?
  success Boolean
  log     String  @db.VarChar(255)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("log_users")
}

model Requests {
  id        Int     @id @unique @default(autoincrement())
  user_name String?
  table     String?
  song_name String  @db.VarChar(255)
  favorite  Boolean @default(false)
  done  Boolean @default(false)

  client_id String
  client    Client @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("requests")
}
